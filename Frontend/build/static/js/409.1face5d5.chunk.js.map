{"version":3,"file":"static/js/409.1face5d5.chunk.js","mappings":"yMA0BA,EAxBe,SAACA,IAEZC,EAAAA,EAAAA,YAAU,WACNC,SAASC,eAAeH,EAAMI,YAAYC,QAAUL,EAAMM,cAC3D,IAOH,OACI,iBAAKC,UAAWP,EAAMQ,WAAa,2CAAnC,UACKR,EAAMS,YACP,iBAAKF,UAAU,SAASG,QARX,SAACC,GAClBT,SAASC,eAAeH,EAAMI,YAAYC,SAAWL,EAAMM,YAC3DN,EAAMY,OAAOD,EAAEE,OAAOC,QAMlB,WACI,kBAAOC,KAAK,WAAWC,GAAIhB,EAAMI,cACjC,gBAAKG,UAAU,wB,oBC+B/B,EA5Cc,SAACP,GASb,OACE,UAACiB,EAAA,EAAD,CAAWC,SAAUlB,EAAMQ,WAA3B,WACE,0BACE,UAACW,EAAA,EAAD,YACE,wBACKnB,EAAMoB,SAEX,cAAGb,UAAU,iBAAb,SAA+BP,EAAMqB,eAGzC,iBAAwBd,UAAWP,EAAMsB,OAAS,eAAiB,QAAnE,WACE,kBACAP,KAAMf,EAAMuB,KACZP,GAAIhB,EAAMoB,MAAMI,WAAWC,QAAQ,IAAK,IACxCC,KAAM1B,EAAM2B,UACZC,IAAK5B,EAAM6B,QACXC,IAAK9B,EAAM+B,QACXC,aAAchC,EAAMiC,KACpBC,SAtBc,SAACvB,GACnBX,EAAMmC,iBAAiBxB,EAAEE,OAAOC,UAuB3Bd,EAAMsB,SACP,mBAAQN,GAAIhB,EAAMsB,OAClBU,aAAchC,EAAMoC,cACpBF,SA/BiB,SAACvB,GACtBX,EAAMqC,eAAe1B,EAAEE,OAAOC,QA4B1B,SAGGd,EAAMsC,aAAaC,KAAI,SAAAC,GAAK,OAC7B,mBAEA1B,MAAO0B,EAAMC,MAFb,SAGED,EAAMC,OAFHD,EAAMC,cAhBLzC,EAAMY,YC+FtB,EAlHe,SAACZ,GACZ,OACI,UAACiB,EAAA,EAAD,CAAgCC,SAAS,eAAzC,WACI,0BACI,UAACC,EAAA,EAAD,CAAMX,WAAW,WAAjB,WACI,eAAID,UAAU,eAAd,SACKP,EAAMoB,SAEX,cAAGb,UAAU,iBAAiBS,GAAIhB,EAAMoB,MAAMI,WAAa,eAA3D,SAA4ExB,EAAM0C,kBAGrF1C,EAAM2C,OAAQ,0BACX,UAACxB,EAAA,EAAD,CAAMX,WAAW,WAAjB,WACI,eAAID,UAAU,eAAd,0BAGA,cAAGA,UAAU,iBAAiBS,GAAIhB,EAAMoB,MAAMI,WAAa,eAA3D,SAA4ExB,EAAM0C,mBAG9F,iBAAKnC,UAAU,2BAAf,UACKP,EAAM4C,WAAY,iBAAKrC,UAAU,+BAAf,WACf,gBAAKA,UAAU,2BAAf,uBAGA,gBAAKA,UAAU,0BAA0BS,GAAIhB,EAAMoB,MAAMI,WAAa,aAAtE,SACKxB,EAAM4C,SAASpB,WAAWC,QAAQ,wBAAyB,UAGnEzB,EAAM6C,MAAO,iBAAKtC,UAAU,+BAAf,WACV,gBAAKA,UAAU,2BAAf,oBAGA,gBAAKA,UAAU,0BAA0BS,GAAIhB,EAAMoB,MAAMI,WAAa,QAAtE,SACKxB,EAAM6C,IAAIrB,WAAWC,QAAQ,wBAAyB,UAG9DzB,EAAM8C,aAAc,iBAAKvC,UAAU,+BAAf,WACjB,gBAAKA,UAAU,2BAAf,qBAGA,gBAAKA,UAAU,0BAA0BS,GAAIhB,EAAMoB,MAAMI,WAAa,SAAtE,SACKxB,EAAM8C,WAAWtB,WAAWC,QAAQ,wBAAyB,aAIrEzB,EAAM2C,OAAQ,0BACX,UAACxB,EAAA,EAAD,CAAMX,WAAW,WAAjB,WACI,eAAID,UAAU,sCAAd,2BAGA,cAAGA,UAAU,iBAAiBS,GAAIhB,EAAMoB,MAAMI,WAAa,eAA3D,SAA4ExB,EAAM0C,mBAG1F,iBAAKnC,UAAU,2BAAf,UAECP,EAAM2C,OACP,iBAAKpC,UAAU,+BAAf,WACI,gBAAKA,UAAU,2BAAf,mBAGA,gBAAKA,UAAU,0BAAf,SACKP,EAAM2C,KAAKlB,QAAQ,wBAAyB,UAGpDzB,EAAM+C,iBACP,iBAAKxC,UAAU,+BAAf,WACI,gBAAKA,UAAU,2BAAf,qBAGA,gBAAKA,UAAU,0BAA0BS,GAAIhB,EAAMoB,MAAMI,WAAa,gBAAtE,SACKxB,EAAM+C,eAAetB,QAAQ,wBAAyB,UAG9DzB,EAAMgD,SACP,iBAAKzC,UAAU,+BAAf,WACI,gBAAKA,UAAU,2BAAf,qBAGA,gBAAKA,UAAU,0BAA0BS,GAAIhB,EAAMoB,MAAMI,WAAa,WAAtE,SACKyB,WAAWjD,EAAMgD,OAAS,KAAYE,QAAQ,GAAG1B,WAAa,cAGtExB,EAAMmD,QACP,iBAAK5C,UAAU,+BAAf,WACI,gBAAKA,UAAU,2BAAf,oBAGA,gBAAKA,UAAU,0BAA0BS,GAAIhB,EAAMoB,MAAMI,WAAa,WAAtE,SACKyB,WAAWjD,EAAMmD,OAAOD,QAAQ,GAAG1B,gBAI3CxB,EAAMyC,QAAS,iBAAKlC,UAAU,+BAAf,WACZ,gBAAKA,UAAU,2BAAf,oBAGA,gBAAKA,UAAU,0BAA0BS,GAAIhB,EAAMoB,MAAMI,WAAa,aAAtE,SACKxB,EAAMyC,MAAMjB,WAAWC,QAAQ,wBAAyB,UAGhEzB,EAAMoD,WACP,iBAAK7C,UAAU,+BAAf,WACI,gBAAKA,UAAU,2BAAf,4BAGA,gBAAKA,UAAU,0BAA0BS,GAAIhB,EAAMoB,MAAMI,WAAa,WAAtE,SACKxB,EAAMoD,SAAS5B,qBAxGhBxB,EAAM4C,WCkD9B,EArDgB,SAAC5C,GACb,OACI,4BACI,gBAAKO,UAAU,sBAAf,UACI,SAAC,EAAD,CAAQa,MAAM,UACVqB,MAAOzC,EAAMyC,MACbW,SAAUpD,EAAMoD,cAIxB,SAAC,EAAD,CAAQhC,MAAM,MACVwB,SAAU5C,EAAMqD,YAChBR,IAAK7C,EAAMsD,OACXR,WAAY9C,EAAMuD,QAClBZ,KAAM3C,EAAMwD,QACZT,eAAgB/C,EAAMyD,eACtBT,OAAQhD,EAAM0D,UACdP,MAAOnD,EAAM2D,YAGjB,SAAC,EAAD,CAAQvC,MAAM,OACVwB,SAAU5C,EAAM4D,aAChBf,IAAK7C,EAAM6D,QACXf,WAAY9C,EAAM8D,SAClBnB,KAAM3C,EAAM+D,SACZhB,eAAgB/C,EAAMgE,gBACtBhB,OAAQhD,EAAMiE,WACdd,MAAOnD,EAAMkE,aAGjB,SAAC,EAAD,CAAQ9C,MAAM,QACVwB,SAAU5C,EAAMmE,cAChBtB,IAAK7C,EAAMoE,SACXtB,WAAY9C,EAAMqE,UAClB1B,KAAM3C,EAAMsE,UACZvB,eAAgB/C,EAAMuE,iBACtBvB,OAAQhD,EAAMwE,YACdrB,MAAOnD,EAAMyE,cAGjB,SAAC,EAAD,CAAQrD,MAAM,OACVwB,SAAU5C,EAAM0E,aAChB7B,IAAK7C,EAAM2E,QACX7B,WAAY9C,EAAM4E,SAClBjC,KAAM3C,EAAM6E,SACZ9B,eAAgB/C,EAAM8E,gBACtB9B,OAAQhD,EAAM+E,WACd5B,MAAOnD,EAAMgF,gB,UCurB7B,EA/tBmB,WAOjB,OAA4CC,EAAAA,EAAAA,WAAS,GAArD,eAAOC,EAAP,KAAuBC,EAAvB,KAEE,GAA8BF,EAAAA,EAAAA,UAAS,GAAvC,eAAOG,EAAP,KAAgBC,EAAhB,KACA,GAAwCJ,EAAAA,EAAAA,UAAS,KAAjD,eAAOK,EAAP,KAAqBC,EAArB,KACA,GAA4BN,EAAAA,EAAAA,UAAS,GAArC,eAAOO,EAAP,KAAeC,EAAf,KACA,GAAwCR,EAAAA,EAAAA,UAAS,GAAjD,eAAOS,EAAP,KAAqBC,EAArB,KACA,GAAsCV,EAAAA,EAAAA,UAAS,KAA/C,eAAOW,EAAP,KAAoBC,EAApB,KACA,GAA4CZ,EAAAA,EAAAA,UAAS,GAArD,eAAOa,EAAP,KAAuBC,EAAvB,KACA,GAAsDd,EAAAA,EAAAA,UAAS,KAA/D,eAAOe,EAAP,KAA4BC,EAA5B,KACA,GAA4BhB,EAAAA,EAAAA,UAAS,GAArC,eAAOiB,EAAP,KAAeC,EAAf,KACA,GAAsClB,EAAAA,EAAAA,UAAS,KAA/C,eAAOmB,EAAP,KAAoBC,EAApB,KACA,GAA0BpB,EAAAA,EAAAA,UAAS,GAAnC,eAAOqB,EAAP,KAAcC,EAAd,KACA,IAAkCtB,EAAAA,EAAAA,UAAS,GAA3C,iBAAOuB,GAAP,MAAkBC,GAAlB,MACA,IAA4CxB,EAAAA,EAAAA,UAAS,KAArD,iBAAOyB,GAAP,MAAuBC,GAAvB,MACA,IAAwC1B,EAAAA,EAAAA,UAAS,GAAjD,iBAAO2B,GAAP,MAAqBC,GAArB,MACA,IAAwB5B,EAAAA,EAAAA,UAAS,GAAjC,iBAAO6B,GAAP,MAAaC,GAAb,MAGA,IAAsC9B,EAAAA,EAAAA,WAAS,GAA/C,iBAAO+B,GAAP,MAAoBC,GAApB,MACA,IAA8BhC,EAAAA,EAAAA,WAAS,GAAvC,iBAAOiC,GAAP,MAAgBC,GAAhB,MACA,IAAgClC,EAAAA,EAAAA,WAAS,GAAzC,iBAAOmC,GAAP,MAAiBC,GAAjB,MACA,IAAoCpC,EAAAA,EAAAA,WAAS,GAA7C,iBAAOqC,GAAP,MAAmBC,GAAnB,MACA,IAAsCtC,EAAAA,EAAAA,WAAS,GAA/C,iBAAO3E,GAAP,MAAoBkH,GAApB,MAIA,IAA0BvC,EAAAA,EAAAA,WAAS,GAAnC,iBAAOxC,GAAP,MAAcgF,GAAd,MACA,IAAgCxC,EAAAA,EAAAA,WAAS,GAAzC,iBAAO7B,GAAP,MAAiBsE,GAAjB,MAEA,IAAgCzC,EAAAA,EAAAA,WAAS,GAAzC,iBAAOtB,GAAP,MAAiBgE,GAAjB,MACA,IAAkC1C,EAAAA,EAAAA,WAAS,GAA3C,iBAAOf,GAAP,MAAkB0D,GAAlB,MACA,IAAoC3C,EAAAA,EAAAA,WAAS,GAA7C,iBAAOR,GAAP,MAAmBoD,GAAnB,MACA,IAAkC5C,EAAAA,EAAAA,WAAS,GAA3C,iBAAOD,GAAP,MAAkB8C,GAAlB,MAEA,IAAsC7C,EAAAA,EAAAA,WAAS,GAA/C,iBAAO5B,GAAP,MAAoB0E,GAApB,MACA,IAAwC9C,EAAAA,EAAAA,WAAS,GAAjD,iBAAOrB,GAAP,MAAqBoE,GAArB,MACA,IAA0C/C,EAAAA,EAAAA,WAAS,GAAnD,iBAAOd,GAAP,MAAsB8D,GAAtB,MACA,IAAwChD,EAAAA,EAAAA,WAAS,GAAjD,iBAAOP,GAAP,MAAqBwD,GAArB,MAEA,IAA4BjD,EAAAA,EAAAA,WAAS,GAArC,iBAAO3B,GAAP,MAAe6E,GAAf,MACA,IAA8BlD,EAAAA,EAAAA,WAAS,GAAvC,iBAAOpB,GAAP,MAAgBuE,GAAhB,MACA,IAAgCnD,EAAAA,EAAAA,WAAS,GAAzC,iBAAOb,GAAP,MAAiBiE,GAAjB,MACA,IAA8BpD,EAAAA,EAAAA,WAAS,GAAvC,iBAAON,GAAP,MAAgB2D,GAAhB,MAEA,IAA8BrD,EAAAA,EAAAA,WAAS,GAAvC,iBAAO1B,GAAP,MAAgBgF,GAAhB,MACA,IAAgCtD,EAAAA,EAAAA,WAAS,GAAzC,iBAAOnB,GAAP,MAAiB0E,GAAjB,MACA,IAAkCvD,EAAAA,EAAAA,WAAS,GAA3C,iBAAOZ,GAAP,MAAkBoE,GAAlB,MACA,IAAgCxD,EAAAA,EAAAA,WAAS,GAAzC,iBAAOL,GAAP,MAAiB8D,GAAjB,MAEA,IAA8BzD,EAAAA,EAAAA,WAAS,GAAvC,iBAAOzB,GAAP,MAAgBmF,GAAhB,MACA,IAAgC1D,EAAAA,EAAAA,WAAS,GAAzC,iBAAOlB,GAAP,MAAiB6E,GAAjB,MACA,IAAkC3D,EAAAA,EAAAA,WAAS,GAA3C,iBAAOX,GAAP,MAAkBuE,GAAlB,MACA,IAAgC5D,EAAAA,EAAAA,WAAS,GAAzC,iBAAOJ,GAAP,MAAiBiE,GAAjB,MAEA,IAA4C7D,EAAAA,EAAAA,UAAS,GAArD,iBAAOxB,GAAP,MAAuBsF,GAAvB,MACA,IAA8C9D,EAAAA,EAAAA,UAAS,GAAvD,iBAAOjB,GAAP,MAAwBgF,GAAxB,MACA,IAAgD/D,EAAAA,EAAAA,UAAS,GAAzD,iBAAOV,GAAP,MAAyB0E,GAAzB,MACA,IAA8ChE,EAAAA,EAAAA,UAAS,GAAvD,iBAAOH,GAAP,MAAwBoE,GAAxB,MAEA,IAAkCjE,EAAAA,EAAAA,UAAS,GAA3C,iBAAOvB,GAAP,MAAkByF,GAAlB,MACA,IAAoClE,EAAAA,EAAAA,UAAS,GAA7C,iBAAOhB,GAAP,MAAmBmF,GAAnB,MACA,IAAsCnE,EAAAA,EAAAA,UAAS,GAA/C,iBAAOT,GAAP,MAAoB6E,GAApB,MACA,IAAoCpE,EAAAA,EAAAA,UAAS,GAA7C,iBAAOF,GAAP,MAAmBuE,GAAnB,OAIArJ,EAAAA,EAAAA,YAAU,WACFsJ,KAAKC,MAAMC,aAAaC,QAAQ,cAChCD,aAAaE,QAAQ,WAAYJ,KAAKK,UAAU,CAAC,CAACC,SAAU,MAAOC,KAAM,MAE7E,IAAID,EAAWN,KAAKC,MAAMC,aAAaC,QAAQ,aAAa,GAmB5D,GAjBAvE,GAAkB,SAAA4E,GAAI,OAAWF,MACjCG,EAAAA,EAAAA,GAAM,gBACLC,MAAK,SAAAC,GACFA,EAASC,kBAAoBC,SAASF,EAASC,mBAC/CD,EAASG,iBAAmBD,SAASF,EAASG,kBAC9CC,QAAQC,IAAIL,GACZM,GAAYvH,WAAWiH,EAAS/G,MAAQ0G,EAASC,MAAM5G,QAAQ,IAC/DuH,GAAaxH,WAAYiH,EAASQ,OAASb,EAASC,KAAQ,KAAS5G,QAAQ,IAC7EyH,GAAmB1H,YAAYiH,EAASC,kBAAoBD,EAASG,kBAAoB,KAASnH,QAAQ,IAC1G0H,GAAqB3H,WAAYiH,EAASW,SAAWhB,EAASC,KAAQ,KAAS5G,QAAQ,IACvF4H,GAAa7H,WAAWiH,EAASa,QAAU,KAAY7H,QAAQ,IAC/D8H,GAAmB,GACnBC,GAAgBhI,WAAaiH,EAAS/G,MAAQ0G,EAASC,KAAQI,EAASa,QAAW,KAAS7H,QAAQ,IACpGgI,GAAW,GACXjE,IAAe,SAAAkE,GAAS,OAAKA,QAG9B5B,KAAKC,MAAMC,aAAaC,QAAQ,WAAW,CAC1C,IAAI0B,EAAS7B,KAAKC,MAAMC,aAAaC,QAAQ,WAC7CrE,GAAW,SAAA0E,GAAI,OAAW9G,WAAWmI,EAAOC,QAAU,KAASnI,QAAQ,MAE3EiE,IAAYD,MACb,IAEH,IAkBMoE,GAAkB,WACpBrE,IAAe,SAAAkE,GAAS,OAAKA,KAC7B,IAgBII,EAhBAC,GAAU,EACVd,EAASzH,WAAWuC,GAAQtC,QAAQ,GACpCuI,EAAc7F,EACd8F,EAAiBzI,WAAW6C,GAAgB5C,QAAQ,GACpDyI,EAAsB3F,EACtBqF,EAAUpI,WAAWmC,GAASlC,QAAQ,GACtC0I,EAAetG,EACftC,EAASC,WAAWiD,GAAQhD,QAAQ,GACpC2I,EAAczF,EACd0F,EAAY7I,WAAWuD,IAAWtD,QAAQ,GAC1C6I,EAAiBrF,GACjBvD,EAAQF,WAAWqD,GAAOpD,QAAQ,GAClC8I,EAAe/I,WAAW2D,IAAc1D,QAAQ,GAChDP,EAAOM,WAAW6D,IAAM5D,QAAQ,GAIhC+I,EAAmB,EAEDvB,GAAN,MAAhBe,EAAgC,IAAuB,MAAhBA,EAAgC,IAAoB,IAE7DC,GAAN,MAAxBC,EAAgD,IAA+B,MAAxBA,EAAgD,IAA4B,IAGnI,IAAIO,EADmBb,GAAN,MAAjBO,EAAkC,IAAwB,MAAjBA,EAAkC,IAAqB,IAI5FO,EADkBnJ,GAAN,MAAhB6I,EAAgC,IAAuB,MAAhBA,EAAgC,IAAoB,IAGvFO,EAAqE,IAApDnJ,WAAYE,EAAQH,EAAU,KAASE,QAAQ,GAEhEmJ,GADqBP,GAAN,MAAnBC,EAAsC,IAA0B,MAAnBA,EAAsC,IAAuB,KAClEK,EACf,IAAzBC,EAA6BA,EAAuB,EAAIA,GAAwB,IAEhFL,EAAe,IAAMA,EACrBrJ,GAAc,IAEd8E,GAASxE,WAAWoI,EAAUlI,GAAOD,QAAQ,IAC7C,IAAK,IAAIoJ,EAAI,EAAGA,EAAI,IAAMA,IAAK,CAY3B,GAXAtJ,IAAqB0H,EAAS/H,EAAuB,KAAd+I,GAAiCvI,EAEpEiJ,EAAiBN,IACjBM,EAAiBhC,SAASgC,EAAiBC,IAO/ClJ,EAAQF,WAAWmJ,EAAiBpJ,GAAQE,QAAQ,GAChDoJ,EAAI,IAMJ,GAHAL,IAFAV,EAAoBb,EAASW,GAAYW,EAAehJ,IACjC0I,EAAiBL,GAAa,IAAarI,GAElEqI,GAAWE,EAAmBpI,EAEpB,IAANmJ,EAAa,CACb,IAAI1J,GAAW2J,EAAAA,EAAAA,GAAWnC,SAAS6B,EAAmB9I,IAClDN,GAAM0J,EAAAA,EAAAA,GAAWnC,SAAS6B,IAC1BO,EAAOvJ,WAAagJ,EAAmB9I,EAAS+I,EAAc,KAAKhJ,QAAQ,GAC3EuJ,GAASF,EAAAA,EAAAA,GAAWnC,SAAS+B,EAAYnJ,IACzC0J,EAAgBzJ,YAAaD,EAASmJ,GAAaA,GAAc,KAAKjJ,QAAQ,GAAG1B,WAErFmG,GAAYxE,GACZ4E,GAAenF,GACfuF,GAAUtF,GACV0F,GAAWiE,GACX7D,GAAW8D,GACX1D,GAAkB2D,GAClBvD,GAAanG,QAEV,GAAU,IAANsJ,EAAa,CACpB,IAAI1J,GAAW2J,EAAAA,EAAAA,GAAWnC,SAAS6B,EAAmB9I,IAClDN,GAAM0J,EAAAA,EAAAA,GAAWnC,SAAS6B,IAC1BO,EAAOvJ,WAAagJ,EAAmB9I,EAAS+I,EAAc,KAAKhJ,QAAQ,GAC3EuJ,GAASF,EAAAA,EAAAA,GAAWnC,SAAS+B,EAAYnJ,IACzC0J,EAAgBzJ,YAAaD,EAASmJ,GAAaA,GAAc,KAAKjJ,QAAQ,GAAG1B,WAErFoG,GAAazE,GACb6E,GAAgBpF,GAChBwF,GAAWvF,GACX2F,GAAYgE,GACZ5D,GAAY6D,GACZzD,GAAmB0D,GACnBtD,GAAcpG,QACX,GAAU,KAANsJ,EAAc,CACrB,IAAI1J,GAAW2J,EAAAA,EAAAA,GAAWnC,SAAS6B,EAAmB9I,IAClDN,GAAM0J,EAAAA,EAAAA,GAAWnC,SAAS6B,IAC1BO,EAAOvJ,WAAagJ,EAAmB9I,EAAS+I,EAAc,KAAKhJ,QAAQ,GAC3EuJ,GAASF,EAAAA,EAAAA,GAAWnC,SAAS+B,EAAYnJ,IACzC0J,EAAgBzJ,YAAaD,EAASmJ,GAAaA,GAAc,KAAKjJ,QAAQ,GAAG1B,WAErFqG,GAAc1E,GACd8E,GAAiBrF,GACjByF,GAAYxF,GACZ4F,GAAa+D,GACb3D,GAAa4D,GACbxD,GAAoByD,GACpBrD,GAAerG,QACZ,GAAU,MAANsJ,EAAe,CACtB,IAAI1J,GAAW2J,EAAAA,EAAAA,GAAWnC,SAAS6B,EAAmB9I,IAClDN,GAAM0J,EAAAA,EAAAA,GAAWnC,SAAS6B,IAC1BO,EAAOvJ,WAAagJ,EAAmB9I,EAAS+I,EAAc,KAAKhJ,QAAQ,GAC3EuJ,GAASF,EAAAA,EAAAA,GAAWnC,SAAS+B,EAAYnJ,IACzC0J,EAAgBzJ,YAAaD,EAASmJ,GAAaA,GAAc,KAAKjJ,QAAQ,GAAG1B,WAErFsG,GAAa3E,GACb+E,GAAgBtF,GAChB0F,GAAWzF,GACX6F,GAAY8D,GACZ1D,GAAY2D,GACZvD,GAAmBwD,GACnBpD,GAActG,GAItB,GAAIA,GAAU,OAAgBwI,GAG1B,GAFA9D,GAAY4E,EAAI,GAChBd,GAAU,EACNc,GAAK,IACL,WAES,MAANA,GAAcd,GACrB9D,GAAY,QAIpBH,IAAc,IAuGZiD,GAAc,SAAC/H,GACjB8D,GAAS,SAAA4E,GAAS,OACF1I,MAIdgI,GAAe,SAAChI,GAClBgD,GAAU,SAAA0F,GAAS,OACH1I,MAIdkI,GAAqB,SAAClI,GACxBkD,GAAgB,SAAAwF,GAAS,OACT1I,MAIdkK,GAAoB,SAAClK,GACvBoD,GAAe,SAAAsF,GAAS,OACR1I,MAIdmI,GAAuB,SAACnI,GAC1BsD,GAAkB,SAAAoF,GAAS,OACX1I,MAIdmK,GAA4B,SAACnK,GAC/BwD,GAAuB,SAAAkF,GAAS,OAChB1I,MAgBdqI,GAAe,SAACrI,GAClB0D,GAAU,SAAAgF,GAAS,OACH1I,MAIdoK,GAAoB,SAACpK,GACvB4D,GAAe,SAAA8E,GAAS,OACR1I,MAIduI,GAAqB,SAACvI,GACxBoE,IAAgB,SAAAsE,GAAS,OACT1I,MAIdwI,GAAkB,SAACxI,GACrBgE,IAAa,SAAA0E,GAAS,OACN1I,MAIdqK,GAAuB,SAACrK,GAC1BkE,IAAkB,SAAAwE,GAAS,OACX1I,MAIdyI,GAAa,SAACzI,GAChBsE,IAAQ,SAAAoE,GAAS,OACD1I,MAWtB,OACE,UAACsK,EAAA,EAAD,YACE,gBAAKxM,UAAW+G,GAAa,sBAAwB,mCAArD,UACE,iBAAK/G,UAAW+G,GAAa,qBAAuB,2BAApD,WACI,SAAC,EAAD,CACI7G,WAAYH,GAAc,WAAa,QACvCA,YAAaA,GACbM,OAdc,WACtB0J,QAAQC,IAAI7E,GACZ8B,IAAe,SAAA2D,GAAS,OACPA,MAYT/K,WAAY,mBACZI,WAAa8G,GAAiC,GAApB,qBAG9B,SAAC,EAAD,CACI7G,WAAY2G,GAAW,cAAgB,eACvC9G,YAAa8G,GACbxG,OA9GW,WACnByG,IAAY,SAAA8D,GAAS,OAAiBA,MA8G9B/K,WAAY,iBACZI,WAAa8G,GAAiC,GAApB,qBAG5BJ,IAAW5G,KACT,SAAC,EAAD,CACIc,MAAM,QACNC,OAAQ6D,EAAe2E,SACvBtI,KAAK,SACLU,KAAMqE,GAAgB,EACtB3E,UAAU,UACVE,QAAQ,IACRM,iBAAkBqI,GAClB5J,OAAQoG,GACRxG,WAAa8G,GAAiC,GAApB,qBAIhCJ,IAAW5G,KACT,SAAC,EAAD,CACIc,MAAM,SACNC,OAAQ6D,EAAe2E,SACvBtI,KAAK,SACLU,KAAMuD,EACN7D,UAAU,QACVE,QAAQ,IACRP,OAAO,cACPc,cAAewD,EACftD,aAAc,CAAC,CAACG,MAAO,IAAKuK,eAAe,GAAQ,CAC/CvK,MAAO,IACPuK,eAAe,GAChB,CAACvK,MAAO,IAAKuK,eAAe,IAC/B7K,iBAAkBsI,GAClBpI,eAAgBsK,GAChB/L,OAAQoG,GACRxG,WAAa8G,GAAiC,GAApB,qBAIhCJ,KAAY5G,KACV,SAAC,EAAD,CACIc,MAAM,SACNC,OAAO,MACPE,KAAK,SACLU,KAAMyD,EACN/D,UAAU,QACVE,QAAQ,IACRP,OAAO,cACPc,cAAewD,EACftD,aAAc,CAAC,CAACG,MAAO,IAAKuK,eAAe,GAAQ,CAC/CvK,MAAO,IACPuK,eAAe,GAChB,CAACvK,MAAO,IAAKuK,eAAe,IAC/B7K,iBAAkBsI,GAClBpI,eAAgBsK,GAChB/L,OAAQoG,GACRxG,WAAa8G,GAAiC,GAApB,qBAIhCJ,KACE,SAAC,EAAD,CACI9F,MAAM,UACNC,OAAO,MACPE,KAAK,SACLU,KAAMmD,GAAoB,EAC1BzD,UAAU,QACVE,QAAQ,IACRP,OAAO,eACPc,cAAekD,EACfhD,aAAc,CAAC,CAACG,MAAO,IAAKuK,eAAe,GAAQ,CAC/CvK,MAAO,IACPuK,eAAe,GAChB,CAACvK,MAAO,IAAKuK,eAAe,IAC/B7K,iBAjJM,SAACM,GACnB4C,GAAW,SAAA8F,GAAS,OACJ1I,MAgJJJ,eA5IW,SAACI,GACxB8C,GAAgB,SAAA4F,GAAS,OACT1I,MA0IgC7B,OAAQoG,GAC5CxG,WAAa8G,GAAiC,GAApB,qBAIhCJ,KACE,SAAC,EAAD,CACI9F,MAAM,SACNC,OAAO,MACPE,KAAK,SACLU,KAAMiE,GAAkB,EACxBvE,UAAU,QACVE,QAAQ,IACRP,OAAO,cACPc,cAAegE,EACf9D,aAAc,CAAC,CAACG,MAAO,IAAKuK,eAAe,GAAQ,CAC/CvK,MAAO,IACPuK,eAAe,GAChB,CAACvK,MAAO,IAAKuK,eAAe,IAC/B7K,iBAAkB2I,GAClBzI,eAAgBwK,GAAmBjM,OAAQoG,GAC3CxG,WAAa8G,GAAiC,GAApB,oBAGjCF,KACG,SAAC,EAAD,CACIhG,MAAM,eACNC,OAAO,IACPE,KAAK,SACLU,KAAM2E,IAA8B,EACpCjF,UAAU,OACVE,QAAQ,IACRoL,QAAQ,MACR9K,iBAAkB6I,GAClBpK,OAAQoG,GACRxG,WAAa8G,GAAiC,GAApB,oBAGjCF,KACG,SAAC,EAAD,CACIhG,MAAM,OACNC,OAAO,IACPE,KAAK,SACLU,KAAM6E,IAAc,EACpBnF,UAAU,OACVE,QAAQ,IACRoL,QAAQ,MACR9K,iBAAkB6I,GAClBpK,OAAQoG,GACRxG,WAAa8G,GAAiC,GAApB,oBAGjCF,KAAaF,IAAW5G,KACrB,SAAC,EAAD,CACIc,MAAM,cACNC,OAAQ6D,EAAe2E,SAAUtI,KAAK,SACtCU,KAAM6D,GAAkC,EACxCnE,UAAU,QACVE,QAAQ,IACRP,OAAO,cAAcc,cAAe4D,EACpC1D,aAAc,CAAC,CAACG,MAAO,IAAKuK,eAAe,GAAQ,CAC3CvK,MAAO,IACPuK,eAAe,GACpB,CAACvK,MAAO,IAAKuK,eAAe,IAC/B7K,iBAAkByI,GAClBvI,eAAgBuK,GAA2BhM,OAAQoG,GACnDxG,WAAa8G,GAAiC,GAApB,oBAGjCF,IAAY9G,KACT,SAAC,EAAD,CACIc,MAAM,aACNC,OAAO,iBAAiBE,KAAK,SAC7BU,KAAMuE,GACN7E,UAAU,OACVE,QAAS2E,GAAWrE,iBAAkB8I,GACtC3J,OAAO,iBAAiBc,cAAesE,GACvCpE,aAAc,CAAC,CAACG,MAAO,IAAKuK,eAAe,GAAQ,CAC3CvK,MAAO,IACPuK,eAAe,GACpB,CAACvK,MAAO,IAAKuK,eAAe,IAC/B3K,eAAgByK,GAChBlM,OAAQoG,GACRxG,WAAa8G,GAAiC,GAApB,qBAIlC,SAACrG,EAAA,EAAD,CAAWC,SAAWoG,GAAiC,GAApB,kBAAnC,UACI,iBAAK/G,UAAU,QAAf,WACI,mBAAQA,UAAU,sBAAsBG,QAzgBpC,YAChBsJ,EAAAA,EAAAA,GAAM,gBACLC,MAAK,SAAAC,GACFM,GAAYvH,WAAWiH,EAAS/G,MAAQ+B,EAAe4E,MAAM5G,QAAQ,IACrEuH,GAAaxH,WAAYiH,EAASQ,OAASxF,EAAe4E,KAAQ,KAAS5G,QAAQ,IACnF4H,GAAa7H,WAAWiH,EAASa,QAAU,KAAY7H,QAAQ,IAC/D0H,GAAqB3H,WAAYiH,EAASW,SAAW3F,EAAe4E,KAAQ,KAAS5G,QAAQ,IAC7FyJ,GAAkB,KAClBC,GAA0B,KAC1BC,GAAkB,KAClB7B,GAAmB,GACnBC,GAAgBhI,WAAaiH,EAAS/G,MAAQ+B,EAAe4E,KAAQI,EAASa,QAAW,KAAS7H,QAAQ,IAC1G4J,GAAqB,KACrB5B,GAAW,GACXI,SA2fQ,oBACA,mBAAQ/K,UAAU,YAAYG,QAASJ,GAAcgL,GApXvC,WAC1BrE,IAAe,SAAAkE,GAAS,OAAKA,KAC7B,IAUII,EAVAC,GAAU,EACVd,EAASzH,WAAWuC,GAAQtC,QAAQ,GACpCuI,EAAc7F,EACdyF,EAAUpI,WAAWmC,GAASlC,QAAQ,GACtC0I,EAAetG,EACftC,EAASC,WAAWiD,GAAQhD,QAAQ,GACpC2I,EAAczF,EACd4F,EAAe/I,WAAW2D,IAAc1D,QAAQ,GAChDP,EAAOM,WAAW6D,IAAM5D,QAAQ,GAGhC+I,EAAmB,EAEDvB,GAAN,MAAhBe,EAAgC,IAAuB,MAAhBA,EAAgC,IAAoB,IAG3F,IAAIS,EADmBb,GAAN,MAAjBO,EAAkC,IAAwB,MAAjBA,EAAkC,IAAqB,IAI5FO,EADkBnJ,GAAN,MAAhB6I,EAAgC,IAAuB,MAAhBA,EAAgC,IAAoB,IAG3FG,EAAe,IAAMA,EACrBrJ,GAAc,IAEd,IAAK,IAAI2J,EAAI,EAAGA,EAAI,IAAMA,IAAK,CAG3B,GAFAtJ,GAAmB0H,EAAS/H,EAExB2J,EAAI,IAKJ,GAHAL,GADAV,EAAoBb,EAASW,GAAYW,EAAehJ,GAExDqI,GAAWE,EAED,IAANe,EAAa,CACb,IAAI1J,GAAW2J,EAAAA,EAAAA,GAAWnC,SAAS6B,IAC/BO,EAAOvJ,WAAagJ,EAAoBC,EAAc,KAAKhJ,QAAQ,GACnEuJ,GAASF,EAAAA,EAAAA,GAAWnC,SAAS+B,EAAYnJ,IACzC0J,EAAgBzJ,YAAaD,EAASmJ,GAAaA,GAAc,KAAKjJ,QAAQ,GAAG1B,WAErFuG,GAAenF,GACf2F,GAAWiE,GACX7D,GAAW8D,GACX1D,GAAkB2D,GAClBvD,GAAanG,QAEV,GAAU,IAANsJ,EAAa,CACpB,IAAI1J,GAAW2J,EAAAA,EAAAA,GAAWnC,SAAS6B,IAC/BO,EAAOvJ,WAAagJ,EAAoBC,EAAc,KAAKhJ,QAAQ,GACnEuJ,GAASF,EAAAA,EAAAA,GAAWnC,SAAS+B,EAAYnJ,IACzC0J,EAAgBzJ,YAAaD,EAASmJ,GAAaA,GAAc,KAAKjJ,QAAQ,GAAG1B,WAErFwG,GAAgBpF,GAChB4F,GAAYgE,GACZ5D,GAAY6D,GACZzD,GAAmB0D,GACnBtD,GAAcpG,QACX,GAAU,KAANsJ,EAAc,CACrB,IAAI1J,GAAW2J,EAAAA,EAAAA,GAAWnC,SAAS6B,IAC/BO,EAAOvJ,WAAagJ,EAAoBC,EAAc,KAAKhJ,QAAQ,GACnEuJ,GAASF,EAAAA,EAAAA,GAAWnC,SAAS+B,EAAYnJ,IACzC0J,EAAgBzJ,YAAaD,EAASmJ,GAAaA,GAAc,KAAKjJ,QAAQ,GAAG1B,WAErFyG,GAAiBrF,GACjB6F,GAAa+D,GACb3D,GAAa4D,GACbxD,GAAoByD,GACpBrD,GAAerG,QACZ,GAAU,MAANsJ,EAAe,CACtB,IAAI1J,GAAW2J,EAAAA,EAAAA,GAAWnC,SAAS6B,IAC/BO,EAAOvJ,WAAagJ,EAAoBC,EAAc,KAAKhJ,QAAQ,GACnEuJ,GAASF,EAAAA,EAAAA,GAAWnC,SAAS+B,EAAYnJ,IACzC0J,EAAgBzJ,YAAaD,EAASmJ,GAAaA,GAAc,KAAKjJ,QAAQ,GAAG1B,WAErF0G,GAAgBtF,GAChB8F,GAAY8D,GACZ1D,GAAY2D,GACZvD,GAAmBwD,GACnBpD,GAActG,GAItB,GAAIA,GAAU,OAAgBwI,GAG1B,GAFA9D,GAAY4E,EAAI,GAChBd,GAAU,EACNc,GAAK,IACL,WAES,MAANA,GAAcd,GACrB9D,GAAY,QAIpBH,IAAc,IAuRF,iCAKbD,IAAchH,KAAe,gBAAKC,UAAU,+BAAf,UAC3B,yBACE8C,KACC,SAAC,EAAD,CACEZ,MAAOA,GAAQ,IAAMyC,EAAe2E,SACpCzG,SAAUA,GAEVO,SAAUA,GAAW,IAAMuB,EAAe2E,SAC1CxG,YAAaA,GAAe,OAC5BC,OAAQA,GAAS,IAAM4B,EAAe2E,SACtCtG,QAASA,GAAU,KACnBC,QAASA,GAAU,OACnBC,eAAgBA,GAAiB,KACjCC,UAAWA,GAEXQ,UAAWA,GAAY,IAAMgB,EAAe2E,SAC5CjG,aAAcA,GAAe,OAC7BC,QAASA,GAAU,IAAMqB,EAAe2E,SACxC/F,SAAUA,GAAW,KACrBC,SAAUA,GAAW,OACrBC,gBAAiBA,GAAkB,KACnCC,WAAYA,GAEZQ,WAAYA,GAAa,IAAMS,EAAe2E,SAC9C1F,cAAeA,GAAgB,OAC/BC,SAAUA,GAAW,IAAMc,EAAe2E,SAC1CxF,UAAWA,GAAY,KACvBC,UAAWA,GAAY,OACvBC,iBAAkBA,GAAmB,KACrCC,YAAaA,GAEbQ,UAAWA,GAAY,IAAME,EAAe2E,SAC5CnF,aAAcA,GAAe,OAC7BC,QAASA,GAAU,IAAMO,EAAe2E,SACxCjF,SAAUA,GAAW,KACrBC,SAAUA,GAAW,OACrBC,gBAAiBA,GAAkB,KACnCC,WAAYA,MApCP1B,MA+CZiE,KAAehH,KAAe,gBAAKC,UAAU,+BAAf,UAC5B,yBACE8C,KACC,SAAC,EAAD,CACED,SAAUA,GAEVC,YAAaA,GAAe,OAC5BE,QAASA,GAAU,KACnBC,QAASA,GAAU,OACnBC,eAAgBA,GAAiB,KACjCC,UAAWA,GAEXE,aAAcA,GAAe,OAC7BE,SAAUA,GAAW,KACrBC,SAAUA,GAAW,OACrBC,gBAAiBA,GAAkB,KACnCC,WAAYA,GAEZE,cAAeA,GAAgB,OAC/BE,UAAWA,GAAY,KACvBC,UAAWA,GAAY,OACvBC,iBAAkBA,GAAmB,KACrCC,YAAaA,GAEbE,aAAcA,GAAe,OAC7BE,SAAUA,GAAW,KACrBC,SAAUA,GAAW,OACrBC,gBAAiBA,GAAkB,KACnCC,WAAYA,MA3BP1B,W,0CCvqBnB,IARkB,SAACrD,GACf,OACI,gBAAKO,UAAWP,EAAMkB,SAAW,qCAAjC,SACKlB,EAAMkN,a,qDCNZ,IAAMX,EAAa,SAAC9J,GAQvB,OAPIA,EAAMjB,WAAW2L,OAAS,GAAK1K,EAAMjB,WAAW2L,OAAS,EACzD1K,EAAQQ,WAAWR,EAAQ,KAAMS,QAAQ,GAAG1B,WAAa,KAClDiB,EAAMjB,WAAW2L,OAAS,GAAK1K,EAAMjB,WAAW2L,OAAS,GAChE1K,EAAQQ,WAAWR,EAAQ,KAASS,QAAQ,GAAG1B,WAAa,KACrDiB,EAAMjB,WAAW2L,QAAU,KAClC1K,EAAQQ,WAAWR,EAAQ,KAAYS,QAAQ,GAAG1B,WAAa,MAE5DiB","sources":["components/Form/Toggle.js","components/Form/Input.js","components/Form/Result.js","components/Form/Outputs.js","Pages/Calculator.js","components/Form/Container.js","components/Shared/ConvertInt.js"],"sourcesContent":["import React, {useState, useEffect} from 'react'\n\nconst Toggle = (props) => {\n\n    useEffect(() => {\n        document.getElementById(props.Identifier).checked = props.StateToggle\n    }, [])\n\n    const ToggleChange = (e) => {\n        document.getElementById(props.Identifier).checked = !props.StateToggle\n        props.Update(e.target.value)\n    }\n\n    return (\n        <div className={props.SetClasses + \" toggle__container container__calculator\"}>\n            {props.ToggleText}\n            <div className=\"toggle\" onClick={ToggleChange}>\n                <input type=\"checkbox\" id={props.Identifier}></input>\n                <div className=\"toggle__ball\">\n\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Toggle","import React from 'react'\n\nimport Container from './Container'\nimport Text from './Text'\n\nconst Input = (props) => {\n  const UpdateSelected = (e) => {\n    props.onChangeSelect(e.target.value)\n  }\n\n  const UpdateInput = (e) => {\n    props.onChangeFunction(e.target.value)\n  }\n\n  return(\n    <Container setClass={props.SetClasses}>\n      <div>\n        <Text>\n          <h3 >\n              {props.Title}\n          </h3>\n          <p className=\"table__subtext\">{props.Metric}</p>\n        </Text>\n      </div>\n      <div key={props.Update} className={props.Select ? \"input-select\" : \"input\"}>\n        <input \n        type={props.Type} \n        id={props.Title.toString().replace(' ', '')} \n        step={props.Increment} \n        min={props.Minimum} \n        max={props.Maximim} \n        defaultValue={props.Data}\n        onChange={UpdateInput}/>\n        \n        {props.Select && \n        <select id={props.Select} \n        defaultValue={props.SelectedValue} \n        onChange={UpdateSelected}>\n          {props.SelectFields.map(field => \n          <option \n          key={field.Value} \n          value={field.Value}\n          >{field.Value}</option>)}\n        </select>}\n      </div>\n    </Container>\n  )\n}\n\nexport default Input\n","import React from 'react'\n\nimport Container from './Container'\nimport Text from './Text'\n\nconst Result = (props) => {\n    return (\n        <Container key={props.Safemoon} setClass=\"align-center\">\n            <div>\n                <Text SetClasses=\"flex-row\">\n                    <h3 className=\"result-title\">\n                        {props.Title}\n                    </h3>\n                    <p className=\"table__subtext\" id={props.Title.toString() + \"__likelyhood\"}>{props.Likelyhood}</p>\n                </Text>\n            </div>\n                {props.Burn && <div>\n                    <Text SetClasses=\"flex-row\">\n                        <h5 className=\"result-title\">\n                            Reflections\n                        </h5>\n                        <p className=\"table__subtext\" id={props.Title.toString() + \"__likelyhood\"}>{props.Likelyhood}</p>\n                    </Text>\n                </div>}\n            <div className=\"result-container__output\">\n                {props.Safemoon && <div className=\"result-container flex-column\">\n                    <div className=\"result-container__header\">\n                        Safemoon\n                    </div>  \n                    <div className=\"result-container__value\" id={props.Title.toString() + \"__Safemoon\"}>\n                        {props.Safemoon.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")}\n                    </div> \n                </div>}\n                {props.USD && <div className=\"result-container flex-column\">\n                    <div className=\"result-container__header\" >\n                        Value\n                    </div>  \n                    <div className=\"result-container__value\" id={props.Title.toString() + \"__USD\"}>\n                        {props.USD.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")}\n                    </div> \n                </div>}\n                {props.Percentage && <div className=\"result-container flex-column\">\n                    <div className=\"result-container__header\">\n                        Gain %\n                    </div>  \n                    <div className=\"result-container__value\" id={props.Title.toString() + \"__Gain\"}>\n                        {props.Percentage.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")}\n                    </div> \n                </div>}\n                </div>\n                {props.Burn && <div>\n                    <Text SetClasses=\"flex-row\">\n                        <h5 className=\"result-title result-container__fill\">\n                            Burn / Price\n                        </h5>\n                        <p className=\"table__subtext\" id={props.Title.toString() + \"__likelyhood\"}>{props.Likelyhood}</p>\n                    </Text>\n                </div>}\n                <div className=\"result-container__output\">\n\n                {props.Burn && \n                <div className=\"result-container flex-column\">\n                    <div className=\"result-container__header\">\n                        Burn\n                    </div>  \n                    <div className=\"result-container__value\">\n                        {props.Burn.replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")}\n                    </div> \n                </div>}\n                {props.BurnPercentage && \n                <div className=\"result-container flex-column\">\n                    <div className=\"result-container__header\">\n                        Burn %\n                    </div>  \n                    <div className=\"result-container__value\" id={props.Title.toString() + \"__BurnPercent\"}>\n                        {props.BurnPercentage.replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")}\n                    </div> \n                </div>}\n                {props.Supply && \n                <div className=\"result-container flex-column\">\n                    <div className=\"result-container__header\">\n                        Supply\n                    </div>  \n                    <div className=\"result-container__value\" id={props.Title.toString() + \"__Supply\"}>\n                        {parseFloat(props.Supply / 1000000000).toFixed(2).toString() + \" B SFM\"}\n                    </div>\n                </div>}\n                {props.Price && \n                <div className=\"result-container flex-column\">\n                    <div className=\"result-container__header\">\n                        Price\n                    </div>  \n                    <div className=\"result-container__value\" id={props.Title.toString() + \"__Supply\"}>\n                        {parseFloat(props.Price).toFixed(5).toString()}\n                    </div>\n                </div>}\n\n                {props.Value && <div className=\"result-container flex-column\">\n                    <div className=\"result-container__header\">\n                        Value\n                    </div>  \n                    <div className=\"result-container__value\" id={props.Title.toString() + \"__Safemoon\"}>\n                        {props.Value.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")}\n                    </div> \n                </div>}\n                {props.DaysLeft && \n                <div className=\"result-container flex-column\">\n                    <div className=\"result-container__header\">\n                        Days till 50B\n                    </div>  \n                    <div className=\"result-container__value\" id={props.Title.toString() + \"__Supply\"}>\n                        {props.DaysLeft.toString()}\n                    </div>\n                </div>}\n            </div>\n        </Container>\n    )\n}\n\nexport default Result","import React from 'react'\n\nimport Result from './Result'\n\nconst Outputs = (props) => {\n    return(\n        <div>\n            <div className=\"grid-container-wide\">\n                <Result Title=\"General\" \n                    Value={props.Value}\n                    DaysLeft={props.DaysLeft}\n                />\n            </div>\n\n            <Result Title=\"Day\" \n                Safemoon={props.DaySafemoon} \n                USD={props.DayUSD} \n                Percentage={props.DayGain} \n                Burn={props.DayBurn} \n                BurnPercentage={props.DayBurnPercent} \n                Supply={props.DaySupply}\n                Price={props.DayPrice}\n            />\n\n            <Result Title=\"Week\" \n                Safemoon={props.WeekSafemoon} \n                USD={props.WeekUSD} \n                Percentage={props.WeekGain} \n                Burn={props.WeekBurn} \n                BurnPercentage={props.WeekBurnPercent} \n                Supply={props.WeekSupply}\n                Price={props.WeekPrice}\n            />\n\n            <Result Title=\"Month\" \n                Safemoon={props.MonthSafemoon} \n                USD={props.MonthUSD} \n                Percentage={props.MonthGain} \n                Burn={props.MonthBurn} \n                BurnPercentage={props.MonthBurnPercent} \n                Supply={props.MonthSupply}\n                Price={props.MonthPrice}\n            />\n\n            <Result Title=\"Year\" \n                Safemoon={props.YearSafemoon} \n                USD={props.YearUSD} \n                Percentage={props.YearGain} \n                Burn={props.YearBurn} \n                BurnPercentage={props.YearBurnPercent} \n                Supply={props.YearSupply}\n                Price={props.YearPrice}\n            />\n        </div>        \n    )\n}\n\nexport default Outputs","import React, {useState, useEffect} from 'react'\nimport {Axios} from '../components/Shared/Axios'\n\nimport Main from './../components/UI/Main/Main'\nimport Toggle from './../components/Form/Toggle'\nimport Container from './../components/Form/Container'\n\nimport Input from './../components/Form/Input'\nimport Outputs from './../components/Form/Outputs'\nimport {ConvertInt} from './../components/Shared/ConvertInt'\n\nconst Calculator = () => {\n  // const arr = [\n  //   {Data : [\"First\", \"Second\", \"Third\", \"Fourth\"], Link: \"https://www.google.com/\"},\n  //   {Data : [\"First\", \"Second\"]},\n  //   {Data : [<div className=\"pressure-container\"><p Style=\"cursor:pointer\">Bought / Sold Tokens</p><div className=\"pressure\"><div className=\"Buy\"style={{width: parseFloat(50).toFixed(3) + \"%\"}}>{parseFloat(50).toFixed(3) + \"M\"}</div><div className=\"Sell Negativ\"style={{width: parseFloat(50).toFixed(2) + \"%\"}}>{parseFloat(50).toFixed(3) + \"M\"}</div></div></div>]},\n  //   {Data : [\"First\"]},\n  // ]\n  const [ChosenCurrency, setChosenCurrency] = useState(false)\n    // Inputs\n    const [balance, setBalance] = useState(1)\n    const [balanceState, setBalanceState] = useState(\"M\")\n    const [volume, setVolume] = useState(1)\n    const [volumeTokens, setVolumeTokens] = useState(1)\n    const [volumeState, setVolumeState] = useState(\"M\")\n    const [transferVolume, setTransferVolume] = useState(0)\n    const [transferVolumeState, setTransferVolumeState] = useState(\"M\")\n    const [supply, setSupply] = useState(1)\n    const [supplyState, setSupplyState] = useState(\"B\")\n    const [price, setPrice] = useState(1)\n    const [marketCap, setMarketCap] = useState(1)\n    const [marketCapState, setMarketCapState] = useState(\"M\")\n    const [distribution, setDistribution] = useState(4)\n    const [burn, setBurn] = useState(2)\n\n    // Toggles\n    const [forceUpdate, setForceUpdate] = useState(false)\n    const [loading, setLoading] = useState(true)\n    const [advanced, setAdvanced] = useState(false)\n    const [ShowResult, setShowResult] = useState(false)\n    const [StateToggle, setStateToggle] = useState(true)\n\n\n    //Results\n    const [Value, setValue] = useState(false)\n    const [DaysLeft, setDaysLeft] = useState(false)\n\n    const [DayPrice, setDayPrice] = useState(false)\n    const [WeekPrice, setWeekPrice] = useState(false)\n    const [MonthPrice, setMonthPrice] = useState(false)\n    const [YearPrice, setYearPrice] = useState(false)\n\n    const [DaySafemoon, setDaySafemoon] = useState(false)\n    const [WeekSafemoon, setWeekSafemoon] = useState(false)\n    const [MonthSafemoon, setMonthSafemoon] = useState(false)\n    const [YearSafemoon, setYearSafemoon] = useState(false)\n\n    const [DayUSD, setDayUSD] = useState(false)\n    const [WeekUSD, setWeekUSD] = useState(false)\n    const [MonthUSD, setMonthUSD] = useState(false)\n    const [YearUSD, setYearUSD] = useState(false)\n\n    const [DayGain, setDayGain] = useState(false)\n    const [WeekGain, setWeekGain] = useState(false)\n    const [MonthGain, setMonthGain] = useState(false)\n    const [YearGain, setYearGain] = useState(false)\n\n    const [DayBurn, setDayBurn] = useState(false)\n    const [WeekBurn, setWeekBurn] = useState(false)\n    const [MonthBurn, setMonthBurn] = useState(false)\n    const [YearBurn, setYearBurn] = useState(false)\n\n    const [DayBurnPercent, setDayBurnPercent] = useState(1)\n    const [WeekBurnPercent, setWeekBurnPercent] = useState(1)\n    const [MonthBurnPercent, setMonthBurnPercent] = useState(1)\n    const [YearBurnPercent, setYearBurnPercent] = useState(1)\n\n    const [DaySupply, setDaySupply] = useState(1)\n    const [WeekSupply, setWeekSupply] = useState(1)\n    const [MonthSupply, setMonthSupply] = useState(1)\n    const [YearSupply, setYearSupply] = useState(1)\n\n    // const [ChartInputs, setChartInputs] = useState(false)\n\n    useEffect(() => {\n        if(!JSON.parse(localStorage.getItem(\"Currency\"))){\n            localStorage.setItem(\"Currency\", JSON.stringify([{Currency: 'USD', Rate: 1}]))\n        }\n        var Currency = JSON.parse(localStorage.getItem(\"Currency\"))[0]\n\n        setChosenCurrency(prev => prev = Currency)\n        Axios('/api/getData')\n        .then(response => {\n            response.PressureTokenSell = parseInt(response.PressureTokenSell)\n            response.PressureTokenBuy = parseInt(response.PressureTokenBuy)\n            console.log(response)\n            UpdatePrice(parseFloat(response.Price * Currency.Rate).toFixed(5))\n            UpdateVolume(parseFloat((response.Volume * Currency.Rate) / 1000000).toFixed(3))\n            UpdateVolumeTokens(parseFloat((response.PressureTokenSell + response.PressureTokenBuy) / 1000000).toFixed(3))\n            UpdateTransferVolume(parseFloat((response.Transfer * Currency.Rate) / 1000000).toFixed(3))\n            UpdateSupply(parseFloat(response.CSupply / 1000000000).toFixed(3))\n            UpdateDistribution(4)\n            UpdateMarketCap(parseFloat(((response.Price * Currency.Rate) * response.CSupply) / 1000000).toFixed(3))\n            UpdateBurn(2)\n            setForceUpdate(prevValue => !prevValue)\n\n        })\n        if(JSON.parse(localStorage.getItem(\"Wallet\"))){\n            var wallet = JSON.parse(localStorage.getItem(\"Wallet\"))\n            setBalance(prev => prev = parseFloat(wallet.Balance / 1000000).toFixed(3))\n        }\n        setLoading(!loading)\n    }, [])\n\n    const toggleReset = () => {\n        Axios('/api/getData')\n        .then(response => {\n            UpdatePrice(parseFloat(response.Price * ChosenCurrency.Rate).toFixed(5))\n            UpdateVolume(parseFloat((response.Volume * ChosenCurrency.Rate) / 1000000).toFixed(3))\n            UpdateSupply(parseFloat(response.CSupply / 1000000000).toFixed(3))\n            UpdateTransferVolume(parseFloat((response.Transfer * ChosenCurrency.Rate) / 1000000).toFixed(3))\n            UpdateVolumeState(\"M\")\n            UpdateTransferVolumeState(\"M\")\n            UpdateSupplyState(\"B\")\n            UpdateDistribution(4)\n            UpdateMarketCap(parseFloat(((response.Price * ChosenCurrency.Rate) * response.CSupply) / 1000000).toFixed(3))\n            UpdateMarketCapState(\"M\")\n            UpdateBurn(2)\n            toggleCalculate()\n        })\n    }\n\n    const toggleCalculate = () => {\n        setForceUpdate(prevValue => !prevValue)\n        let DaysSet = false\n        let Volume = parseFloat(volume).toFixed(3)\n        let VolumeState = volumeState\n        let TransferVolume = parseFloat(transferVolume).toFixed(3)\n        let TransferVolumeState = transferVolumeState\n        let Balance = parseFloat(balance).toFixed(3)\n        let BalanceState = balanceState\n        let Supply = parseFloat(supply).toFixed(3)\n        let SupplyState = supplyState\n        let MarketCap = parseFloat(marketCap).toFixed(3)\n        let MarketCapState = marketCapState\n        let Price = parseFloat(price).toFixed(5)\n        let Distribution = parseFloat(distribution).toFixed(2)\n        let Burn = parseFloat(burn).toFixed(2)\n\n        let TransferReflections\n        let DailyReflections\n        let TotalReflections = 0\n\n        VolumeState === 'K' ? Volume *= 1000 : VolumeState === 'M' ? Volume *= 1000000 : Volume *= 1000000000\n\n        TransferVolumeState === 'K' ? TransferVolume *= 1000 : TransferVolumeState === 'M' ? TransferVolume *= 1000000 : TransferVolume *= 1000000000\n\n        BalanceState === 'K' ? Balance *= 1000 : BalanceState === 'M' ? Balance *= 1000000 : Balance *= 1000000000\n        let OldBalance = Balance\n\n        SupplyState === 'K' ? Supply *= 1000 : SupplyState === 'M' ? Supply *= 1000000 : Supply *= 1000000000\n        let OldSupply = Supply\n\n        let StartMarketCap = parseFloat((Price * Supply) / 1000000).toFixed(3) * 1000000\n        MarketCapState === 'K' ? MarketCap *= 1000 : MarketCapState === 'M' ? MarketCap *= 1000000 : MarketCap *= 1000000000\n        let DailyMarketCapChange = (MarketCap - StartMarketCap)\n        DailyMarketCapChange === 0 ? DailyMarketCapChange = 0 : DailyMarketCapChange /= 365\n\n        Distribution = 100 / Distribution\n        Burn = Burn / 100\n\n        setValue(parseFloat(Balance * Price).toFixed(2))\n        for (let i = 0; i < 1000; i++) {\n            Supply = Supply - (((Volume * Burn) + (TransferVolume * (0.2 / 100))) / Price)\n\n            if (StartMarketCap < MarketCap) {\n                StartMarketCap = parseInt(StartMarketCap + DailyMarketCapChange)\n            }\n            // Reflections = ((Volume * Balance) / ((100 / Distribution) * (Marketcap / Supply)))\n            // CardReflections = ((TransferVolume * Balance) / ((100 / CardDistribution) * (Marketcap / Supply)))\n            // Burn = Supply - (((Volume * (Burn / 100) + (TransferVolume * (CardDistribution / 100))) / Price)\n\n            // Reflections = ((Volume * Balance) / ((100 / Distribution) * Supply))*days\n            Price = parseFloat(StartMarketCap / Supply).toFixed(5)\n            if (i < 365) {\n                DailyReflections = (Volume * Balance) / (Distribution * Supply)\n                TransferReflections = (TransferVolume * Balance) / ((100 / 0.4) * Supply)\n                TotalReflections += DailyReflections + TransferReflections\n                Balance += DailyReflections / Price\n\n                if (i === 1 - 1) {\n                    let Safemoon = ConvertInt(parseInt(TotalReflections / Price))\n                    let USD = ConvertInt(parseInt(TotalReflections))\n                    let Gain = parseFloat(((TotalReflections / Price) / OldBalance) * 100).toFixed(2)\n                    let Burned = ConvertInt(parseInt(OldSupply - Supply))\n                    let BurnedPercent = parseFloat(((Supply - OldSupply) / OldSupply) * -100).toFixed(2).toString()\n\n                    setDayPrice(Price)\n                    setDaySafemoon(Safemoon)\n                    setDayUSD(USD)\n                    setDayGain(Gain)\n                    setDayBurn(Burned)\n                    setDayBurnPercent(BurnedPercent)\n                    setDaySupply(Supply)\n\n                } else if (i === 7 - 1) {\n                    let Safemoon = ConvertInt(parseInt(TotalReflections / Price))\n                    let USD = ConvertInt(parseInt(TotalReflections))\n                    let Gain = parseFloat(((TotalReflections / Price) / OldBalance) * 100).toFixed(2)\n                    let Burned = ConvertInt(parseInt(OldSupply - Supply))\n                    let BurnedPercent = parseFloat(((Supply - OldSupply) / OldSupply) * -100).toFixed(2).toString()\n\n                    setWeekPrice(Price)\n                    setWeekSafemoon(Safemoon)\n                    setWeekUSD(USD)\n                    setWeekGain(Gain)\n                    setWeekBurn(Burned)\n                    setWeekBurnPercent(BurnedPercent)\n                    setWeekSupply(Supply)\n                } else if (i === 30 - 1) {\n                    let Safemoon = ConvertInt(parseInt(TotalReflections / Price))\n                    let USD = ConvertInt(parseInt(TotalReflections))\n                    let Gain = parseFloat(((TotalReflections / Price) / OldBalance) * 100).toFixed(2)\n                    let Burned = ConvertInt(parseInt(OldSupply - Supply))\n                    let BurnedPercent = parseFloat(((Supply - OldSupply) / OldSupply) * -100).toFixed(2).toString()\n\n                    setMonthPrice(Price)\n                    setMonthSafemoon(Safemoon)\n                    setMonthUSD(USD)\n                    setMonthGain(Gain)\n                    setMonthBurn(Burned)\n                    setMonthBurnPercent(BurnedPercent)\n                    setMonthSupply(Supply)\n                } else if (i === 365 - 1) {\n                    let Safemoon = ConvertInt(parseInt(TotalReflections / Price))\n                    let USD = ConvertInt(parseInt(TotalReflections))\n                    let Gain = parseFloat(((TotalReflections / Price) / OldBalance) * 100).toFixed(2)\n                    let Burned = ConvertInt(parseInt(OldSupply - Supply))\n                    let BurnedPercent = parseFloat(((Supply - OldSupply) / OldSupply) * -100).toFixed(2).toString()\n\n                    setYearPrice(Price)\n                    setYearSafemoon(Safemoon)\n                    setYearUSD(USD)\n                    setYearGain(Gain)\n                    setYearBurn(Burned)\n                    setYearBurnPercent(BurnedPercent)\n                    setYearSupply(Supply)\n                }\n            }\n\n            if (Supply <= 50000000000 && !DaysSet) {\n                setDaysLeft(i + 1)\n                DaysSet = true\n                if (i >= 364) {\n                    break\n                }\n            } else if (i === 999 && !DaysSet) {\n                setDaysLeft(\"999+\")\n            }\n\n        }\n        setShowResult(true)\n    }\n\n    const toggleCalculateTokens = () => {\n        setForceUpdate(prevValue => !prevValue)\n        let DaysSet = false\n        let Volume = parseFloat(volume).toFixed(3)\n        let VolumeState = volumeState\n        let Balance = parseFloat(balance).toFixed(3)\n        let BalanceState = balanceState\n        let Supply = parseFloat(supply).toFixed(3)\n        let SupplyState = supplyState\n        let Distribution = parseFloat(distribution).toFixed(2)\n        let Burn = parseFloat(burn).toFixed(2)\n\n        let DailyReflections\n        let TotalReflections = 0\n\n        VolumeState === 'K' ? Volume *= 1000 : VolumeState === 'M' ? Volume *= 1000000 : Volume *= 1000000000\n\n        BalanceState === 'K' ? Balance *= 1000 : BalanceState === 'M' ? Balance *= 1000000 : Balance *= 1000000000\n        let OldBalance = Balance\n\n        SupplyState === 'K' ? Supply *= 1000 : SupplyState === 'M' ? Supply *= 1000000 : Supply *= 1000000000\n        let OldSupply = Supply\n\n        Distribution = 100 / Distribution\n        Burn = Burn / 100\n\n        for (let i = 0; i < 1000; i++) {\n            Supply = Supply - (Volume * Burn)\n\n            if (i < 365) {\n                DailyReflections = (Volume * Balance) / (Distribution * Supply)\n                TotalReflections += DailyReflections\n                Balance += DailyReflections\n\n                if (i === 1 - 1) {\n                    let Safemoon = ConvertInt(parseInt(TotalReflections))\n                    let Gain = parseFloat(((TotalReflections) / OldBalance) * 100).toFixed(2)\n                    let Burned = ConvertInt(parseInt(OldSupply - Supply))\n                    let BurnedPercent = parseFloat(((Supply - OldSupply) / OldSupply) * -100).toFixed(2).toString()\n\n                    setDaySafemoon(Safemoon)\n                    setDayGain(Gain)\n                    setDayBurn(Burned)\n                    setDayBurnPercent(BurnedPercent)\n                    setDaySupply(Supply)\n\n                } else if (i === 7 - 1) {\n                    let Safemoon = ConvertInt(parseInt(TotalReflections))\n                    let Gain = parseFloat(((TotalReflections) / OldBalance) * 100).toFixed(2)\n                    let Burned = ConvertInt(parseInt(OldSupply - Supply))\n                    let BurnedPercent = parseFloat(((Supply - OldSupply) / OldSupply) * -100).toFixed(2).toString()\n\n                    setWeekSafemoon(Safemoon)\n                    setWeekGain(Gain)\n                    setWeekBurn(Burned)\n                    setWeekBurnPercent(BurnedPercent)\n                    setWeekSupply(Supply)\n                } else if (i === 30 - 1) {\n                    let Safemoon = ConvertInt(parseInt(TotalReflections))\n                    let Gain = parseFloat(((TotalReflections) / OldBalance) * 100).toFixed(2)\n                    let Burned = ConvertInt(parseInt(OldSupply - Supply))\n                    let BurnedPercent = parseFloat(((Supply - OldSupply) / OldSupply) * -100).toFixed(2).toString()\n\n                    setMonthSafemoon(Safemoon)\n                    setMonthGain(Gain)\n                    setMonthBurn(Burned)\n                    setMonthBurnPercent(BurnedPercent)\n                    setMonthSupply(Supply)\n                } else if (i === 365 - 1) {\n                    let Safemoon = ConvertInt(parseInt(TotalReflections))\n                    let Gain = parseFloat(((TotalReflections) / OldBalance) * 100).toFixed(2)\n                    let Burned = ConvertInt(parseInt(OldSupply - Supply))\n                    let BurnedPercent = parseFloat(((Supply - OldSupply) / OldSupply) * -100).toFixed(2).toString()\n\n                    setYearSafemoon(Safemoon)\n                    setYearGain(Gain)\n                    setYearBurn(Burned)\n                    setYearBurnPercent(BurnedPercent)\n                    setYearSupply(Supply)\n                }\n            }\n\n            if (Supply <= 50000000000 && !DaysSet) {\n                setDaysLeft(i + 1)\n                DaysSet = true\n                if (i >= 364) {\n                    break\n                }\n            } else if (i === 999 && !DaysSet) {\n                setDaysLeft(\"999+\")\n            }\n\n        }\n        setShowResult(true)\n    }\n\n    const toggleAdvanced = () => {\n        setAdvanced(prevValue => prevValue = !prevValue)\n    }\n\n    const UpdatePrice = (Value) => {\n        setPrice(prevValue =>\n            prevValue = Value\n        )\n    }\n\n    const UpdateVolume = (Value) => {\n        setVolume(prevValue =>\n            prevValue = Value\n        )\n    }\n\n    const UpdateVolumeTokens = (Value) => {\n        setVolumeTokens(prevValue =>\n            prevValue = Value\n        )\n    }\n\n    const UpdateVolumeState = (Value) => {\n        setVolumeState(prevValue =>\n            prevValue = Value\n        )\n    }\n\n    const UpdateTransferVolume = (Value) => {\n        setTransferVolume(prevValue =>\n            prevValue = Value\n        )\n    }\n\n    const UpdateTransferVolumeState = (Value) => {\n        setTransferVolumeState(prevValue =>\n            prevValue = Value\n        )\n    }\n\n    const UpdateBalance = (Value) => {\n        setBalance(prevValue =>\n            prevValue = Value\n        )\n    }\n\n    const UpdateBalanceState = (Value) => {\n        setBalanceState(prevValue =>\n            prevValue = Value\n        )\n    }\n\n    const UpdateSupply = (Value) => {\n        setSupply(prevValue =>\n            prevValue = Value\n        )\n    }\n\n    const UpdateSupplyState = (Value) => {\n        setSupplyState(prevValue =>\n            prevValue = Value\n        )\n    }\n\n    const UpdateDistribution = (Value) => {\n        setDistribution(prevValue =>\n            prevValue = Value\n        )\n    }\n\n    const UpdateMarketCap = (Value) => {\n        setMarketCap(prevValue =>\n            prevValue = Value\n        )\n    }\n\n    const UpdateMarketCapState = (Value) => {\n        setMarketCapState(prevValue =>\n            prevValue = Value\n        )\n    }\n\n    const UpdateBurn = (Value) => {\n        setBurn(prevValue =>\n            prevValue = Value\n        )\n    }\n\n    const UpdateStateToggle = () => {\n        console.log(volumeTokens)\n        setStateToggle(prevValue =>\n            prevValue = !prevValue\n        )\n    }\n\n  return (\n    <Main>\n      <div className={ShowResult ? \"grid-container-high\" : \"grid-container-full align-center\"}>\n        <div className={ShowResult ? \"flex flex-vertical\" : \"flex flex-standard__wrap\"}>\n            <Toggle \n                ToggleText={StateToggle ? 'Currency' : 'Token'} \n                StateToggle={StateToggle} \n                Update={UpdateStateToggle}\n                Identifier={'CalculatorToggle'}\n                SetClasses={!ShowResult ? \"small-container\" : \"\"}\n            />\n\n            <Toggle \n                ToggleText={advanced ? 'Advanced On' : 'Advanced Off'} \n                StateToggle={advanced} \n                Update={toggleAdvanced}\n                Identifier={'AdvancedToggle'}\n                SetClasses={!ShowResult ? \"small-container\" : \"\"}\n            />\n\n            {!loading && StateToggle &&\n                <Input \n                    Title=\"Price\" \n                    Metric={ChosenCurrency.Currency} \n                    Type=\"number\" \n                    Data={price ? price : 0} \n                    Increment=\"0.00001\" \n                    Minimum=\"0\"\n                    onChangeFunction={UpdatePrice} \n                    Update={forceUpdate}\n                    SetClasses={!ShowResult ? \"small-container\" : \"\"}\n                />\n            }\n\n            {!loading && StateToggle &&\n                <Input \n                    Title=\"Volume\" \n                    Metric={ChosenCurrency.Currency} \n                    Type=\"number\" \n                    Data={volume} \n                    Increment=\"0.001\"         \n                    Minimum=\"0\" \n                    Select=\"VolumeState\" \n                    SelectedValue={volumeState}     \n                    SelectFields={[{Value: \"K\", ChosenDefault: false}, {             \n                        Value: \"M\",              \n                        ChosenDefault: true\n                    }, {Value: \"B\", ChosenDefault: false}]} \n                    onChangeFunction={UpdateVolume}        \n                    onChangeSelect={UpdateVolumeState} \n                    Update={forceUpdate}\n                    SetClasses={!ShowResult ? \"small-container\" : \"\"}\n                />\n            }\n\n            {!loading && !StateToggle &&\n                <Input \n                    Title=\"Volume\" \n                    Metric=\"SFM\"\n                    Type=\"number\" \n                    Data={volumeTokens} \n                    Increment=\"0.001\"         \n                    Minimum=\"0\" \n                    Select=\"VolumeState\" \n                    SelectedValue={volumeState}     \n                    SelectFields={[{Value: \"K\", ChosenDefault: false}, {             \n                        Value: \"M\",              \n                        ChosenDefault: true\n                    }, {Value: \"B\", ChosenDefault: false}]} \n                    onChangeFunction={UpdateVolume}        \n                    onChangeSelect={UpdateVolumeState} \n                    Update={forceUpdate}\n                    SetClasses={!ShowResult ? \"small-container\" : \"\"}\n                />\n            }\n\n            {!loading &&\n                <Input \n                    Title=\"Balance\" \n                    Metric=\"SFM\" \n                    Type=\"number\" \n                    Data={balance ? balance : 0} \n                    Increment=\"0.001\"  \n                    Minimum=\"0\" \n                    Select=\"BalanceState\" \n                    SelectedValue={balanceState}\n                    SelectFields={[{Value: \"K\", ChosenDefault: false}, {\n                        Value: \"M\",\n                        ChosenDefault: true\n                    }, {Value: \"B\", ChosenDefault: false}]} \n                    onChangeFunction={UpdateBalance} \n                    onChangeSelect={UpdateBalanceState} Update={forceUpdate}\n                    SetClasses={!ShowResult ? \"small-container\" : \"\"}\n                />\n            }\n\n            {!loading &&\n                <Input \n                    Title=\"Supply\"\n                    Metric=\"SFM\" \n                    Type=\"number\" \n                    Data={supply ? supply : 0}\n                    Increment=\"0.001\"\n                    Minimum=\"0\" \n                    Select=\"SupplyState\" \n                    SelectedValue={supplyState}\n                    SelectFields={[{Value: \"K\", ChosenDefault: false}, {\n                        Value: \"M\",\n                        ChosenDefault: false\n                    }, {Value: \"B\", ChosenDefault: true}]} \n                    onChangeFunction={UpdateSupply}\n                    onChangeSelect={UpdateSupplyState} Update={forceUpdate}\n                    SetClasses={!ShowResult ? \"small-container\" : \"\"}\n                />\n            }\n            {advanced &&\n                <Input \n                    Title=\"Distribution\" \n                    Metric=\"%\" \n                    Type=\"number\" \n                    Data={distribution ? distribution : 0}\n                    Increment=\"0.01\" \n                    Minimum=\"0\" \n                    Maximum=\"100\" \n                    onChangeFunction={UpdateDistribution}\n                    Update={forceUpdate}\n                    SetClasses={!ShowResult ? \"small-container\" : \"\"}\n                />\n            }\n            {advanced &&\n                <Input \n                    Title=\"Burn\" \n                    Metric=\"%\" \n                    Type=\"number\" \n                    Data={burn ? burn : 0} \n                    Increment=\"0.01\" \n                    Minimum=\"0\"\n                    Maximum=\"100\" \n                    onChangeFunction={UpdateDistribution} \n                    Update={forceUpdate}\n                    SetClasses={!ShowResult ? \"small-container\" : \"\"}\n                />\n            }\n            {advanced && !loading && StateToggle &&\n                <Input \n                    Title=\"Card Volume\" \n                    Metric={ChosenCurrency.Currency} Type=\"number\" \n                    Data={transferVolume ? transferVolume : 0}\n                    Increment=\"0.001\" \n                    Minimum=\"0\" \n                    Select=\"VolumeState\" SelectedValue={transferVolumeState}\n                    SelectFields={[{Value: \"K\", ChosenDefault: false}, {\n                            Value: \"M\",\n                            ChosenDefault: true\n                    }, {Value: \"B\", ChosenDefault: false}]} \n                    onChangeFunction={UpdateTransferVolume}\n                    onChangeSelect={UpdateTransferVolumeState} Update={forceUpdate}\n                    SetClasses={!ShowResult ? \"small-container\" : \"\"}\n                />\n            }\n            {advanced && StateToggle &&\n                <Input \n                    Title=\"Market Cap\" \n                    Metric=\"365 day Target\" Type=\"number\" \n                    Data={marketCap} \n                    Increment=\"0.01\"\n                    Minimum={marketCap} onChangeFunction={UpdateMarketCap}\n                    Select=\"MarketCapState\" SelectedValue={marketCapState}\n                    SelectFields={[{Value: \"K\", ChosenDefault: false}, {\n                            Value: \"M\",\n                            ChosenDefault: false\n                    }, {Value: \"B\", ChosenDefault: true}]} \n                    onChangeSelect={UpdateMarketCapState}\n                    Update={forceUpdate}\n                    SetClasses={!ShowResult ? \"small-container\" : \"\"}\n                />\n            }\n\n            <Container setClass={!ShowResult ? \"small-container\" : \"\"}>\n                <div className=\"input\">\n                    <button className=\"margin-bottom-small\" onClick={toggleReset}>Reset</button>\n                    <button className=\"notice-me\" onClick={StateToggle ? toggleCalculate : toggleCalculateTokens}>Calculate</button>\n                </div>\n            </Container>\n        </div>\n      </div>\n      {ShowResult && StateToggle && <div className=\"grid-container-wide-and-high\">\n         <div key={DaySafemoon}>\n          {DaySafemoon && \n            <Outputs\n              Value={Value + \" \" + ChosenCurrency.Currency}\n              DaysLeft={DaysLeft}\n\n              DayPrice={DayPrice + \" \" + ChosenCurrency.Currency}\n              DaySafemoon={DaySafemoon  + \" SFM\"}\n              DayUSD={DayUSD + \" \" + ChosenCurrency.Currency}\n              DayGain={DayGain + \" %\"}\n              DayBurn={DayBurn + \" SFM\"}\n              DayBurnPercent={DayBurnPercent + \" %\"}\n              DaySupply={DaySupply}\n\n              WeekPrice={WeekPrice + \" \" + ChosenCurrency.Currency}\n              WeekSafemoon={WeekSafemoon + \" SFM\"}\n              WeekUSD={WeekUSD + \" \" + ChosenCurrency.Currency}\n              WeekGain={WeekGain + \" %\"}\n              WeekBurn={WeekBurn + \" SFM\"}\n              WeekBurnPercent={WeekBurnPercent + \" %\"}\n              WeekSupply={WeekSupply}\n\n              MonthPrice={MonthPrice + \" \" + ChosenCurrency.Currency}\n              MonthSafemoon={MonthSafemoon + \" SFM\"}\n              MonthUSD={MonthUSD + \" \" + ChosenCurrency.Currency}\n              MonthGain={MonthGain + \" %\"}\n              MonthBurn={MonthBurn + \" SFM\"}\n              MonthBurnPercent={MonthBurnPercent + \" %\"}\n              MonthSupply={MonthSupply}\n\n              YearPrice={YearPrice + \" \" + ChosenCurrency.Currency}\n              YearSafemoon={YearSafemoon + \" SFM\"}\n              YearUSD={YearUSD + \" \" + ChosenCurrency.Currency}\n              YearGain={YearGain + \" %\"}\n              YearBurn={YearBurn + \" SFM\"}\n              YearBurnPercent={YearBurnPercent + \" %\"}\n              YearSupply={YearSupply}\n            />\n          }\n      </div>\n        {/* <Table \n          TableID=\"TestTable\"\n          Headers={[1, 2, 3, 4]}\n          TableData={arr}\n          TableStyle=\"Horizontal\"/> */}\n      </div>}\n\n      {ShowResult && !StateToggle && <div className=\"grid-container-wide-and-high\">\n         <div key={DaySafemoon}>\n          {DaySafemoon && \n            <Outputs\n              DaysLeft={DaysLeft}\n\n              DaySafemoon={DaySafemoon  + \" SFM\"}\n              DayGain={DayGain + \" %\"}\n              DayBurn={DayBurn + \" SFM\"}\n              DayBurnPercent={DayBurnPercent + \" %\"}\n              DaySupply={DaySupply}\n\n              WeekSafemoon={WeekSafemoon + \" SFM\"}\n              WeekGain={WeekGain + \" %\"}\n              WeekBurn={WeekBurn + \" SFM\"}\n              WeekBurnPercent={WeekBurnPercent + \" %\"}\n              WeekSupply={WeekSupply}\n\n              MonthSafemoon={MonthSafemoon + \" SFM\"}\n              MonthGain={MonthGain + \" %\"}\n              MonthBurn={MonthBurn + \" SFM\"}\n              MonthBurnPercent={MonthBurnPercent + \" %\"}\n              MonthSupply={MonthSupply}\n\n              YearSafemoon={YearSafemoon + \" SFM\"}\n              YearGain={YearGain + \" %\"}\n              YearBurn={YearBurn + \" SFM\"}\n              YearBurnPercent={YearBurnPercent + \" %\"}\n              YearSupply={YearSupply}\n            />\n          }\n      </div>\n        {/* <Table \n          TableID=\"TestTable\"\n          Headers={[1, 2, 3, 4]}\n          TableData={arr}\n          TableStyle=\"Horizontal\"/> */}\n      </div>}\n      {/* <div className=\"grid-container-medium\">\n\n      </div>\n      <div className=\"grid-container-medium\">\n\n      </div>\n      <div className=\"grid-container-small\">\n\n      </div>\n      <div className=\"grid-container-small\">\n\n      </div>\n      <div className=\"grid-container-small\">\n\n      </div> */}\n    </Main>\n  )\n}\n\nexport default Calculator\n","import React from 'react';\n\n\nconst Container = (props) => {\n    return(\n        <div className={props.setClass + \" container__calculator flex-column\"}>\n            {props.children}\n        </div>\n    )\n}\n\nexport default Container","export const ConvertInt = (Value) => { \n    if (Value.toString().length > 3 && Value.toString().length < 7){\n        Value = parseFloat(Value / 1000).toFixed(2).toString() + \" K\"\n    } else if (Value.toString().length > 6 && Value.toString().length < 10){\n        Value = parseFloat(Value / 1000000).toFixed(2).toString() + \" M\"\n    } else if (Value.toString().length >= 10){\n        Value = parseFloat(Value / 1000000000).toFixed(2).toString() + \" B\"\n    }\n    return Value\n}"],"names":["props","useEffect","document","getElementById","Identifier","checked","StateToggle","className","SetClasses","ToggleText","onClick","e","Update","target","value","type","id","Container","setClass","Text","Title","Metric","Select","Type","toString","replace","step","Increment","min","Minimum","max","Maximim","defaultValue","Data","onChange","onChangeFunction","SelectedValue","onChangeSelect","SelectFields","map","field","Value","Likelyhood","Burn","Safemoon","USD","Percentage","BurnPercentage","Supply","parseFloat","toFixed","Price","DaysLeft","DaySafemoon","DayUSD","DayGain","DayBurn","DayBurnPercent","DaySupply","DayPrice","WeekSafemoon","WeekUSD","WeekGain","WeekBurn","WeekBurnPercent","WeekSupply","WeekPrice","MonthSafemoon","MonthUSD","MonthGain","MonthBurn","MonthBurnPercent","MonthSupply","MonthPrice","YearSafemoon","YearUSD","YearGain","YearBurn","YearBurnPercent","YearSupply","YearPrice","useState","ChosenCurrency","setChosenCurrency","balance","setBalance","balanceState","setBalanceState","volume","setVolume","volumeTokens","setVolumeTokens","volumeState","setVolumeState","transferVolume","setTransferVolume","transferVolumeState","setTransferVolumeState","supply","setSupply","supplyState","setSupplyState","price","setPrice","marketCap","setMarketCap","marketCapState","setMarketCapState","distribution","setDistribution","burn","setBurn","forceUpdate","setForceUpdate","loading","setLoading","advanced","setAdvanced","ShowResult","setShowResult","setStateToggle","setValue","setDaysLeft","setDayPrice","setWeekPrice","setMonthPrice","setYearPrice","setDaySafemoon","setWeekSafemoon","setMonthSafemoon","setYearSafemoon","setDayUSD","setWeekUSD","setMonthUSD","setYearUSD","setDayGain","setWeekGain","setMonthGain","setYearGain","setDayBurn","setWeekBurn","setMonthBurn","setYearBurn","setDayBurnPercent","setWeekBurnPercent","setMonthBurnPercent","setYearBurnPercent","setDaySupply","setWeekSupply","setMonthSupply","setYearSupply","JSON","parse","localStorage","getItem","setItem","stringify","Currency","Rate","prev","Axios","then","response","PressureTokenSell","parseInt","PressureTokenBuy","console","log","UpdatePrice","UpdateVolume","Volume","UpdateVolumeTokens","UpdateTransferVolume","Transfer","UpdateSupply","CSupply","UpdateDistribution","UpdateMarketCap","UpdateBurn","prevValue","wallet","Balance","toggleCalculate","DailyReflections","DaysSet","VolumeState","TransferVolume","TransferVolumeState","BalanceState","SupplyState","MarketCap","MarketCapState","Distribution","TotalReflections","OldBalance","OldSupply","StartMarketCap","DailyMarketCapChange","i","ConvertInt","Gain","Burned","BurnedPercent","UpdateVolumeState","UpdateTransferVolumeState","UpdateSupplyState","UpdateMarketCapState","Main","ChosenDefault","Maximum","children","length"],"sourceRoot":""}